/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 12
#line 1 "leg/koreanParser.cpp"

#include <stdio.h>
#include <string.h>
#include <iostream>
#include <memory>
#include <vector>
#define YY_CTX_LOCAL 
#define YY_CTX_MEMBERS \

struct KoreanJamoType {
  std::string koreanChar;
  std::string letterType;
  std::string firstlast;
  std::string begining;
  std::string end;
  KoreanJamoType(const std::string _koreanChar, const std::string _type, const std::string _firstlast) : koreanChar(_koreanChar), letterType(_type), firstlast(_firstlast) {}
  KoreanJamoType(const std::string _koreanChar, const std::string _type, const std::string _begining, const std::string _end, const std::string _firstlast) : koreanChar(_koreanChar), letterType(_type), begining(_begining), end(_end), firstlast(_firstlast) {}
};

struct KoreanCompoundType {
  //typedef std::vector < std::shared_ptr < KoreanJamoType > > Jamos;
  std::string compoundChar;
  std::shared_ptr < KoreanJamoType > initial;
  std::shared_ptr < KoreanJamoType > middle;
  std::shared_ptr < KoreanJamoType > last;
  KoreanCompoundType(const std::string _compoundChar, const  std::shared_ptr < KoreanJamoType > _initial, const std::shared_ptr < KoreanJamoType > _middle, const std::shared_ptr < KoreanJamoType > _last) : compoundChar(_compoundChar), initial(_initial), middle(_middle), last(_last) {}
  KoreanCompoundType(const std::string _compoundChar, const  std::shared_ptr < KoreanJamoType > _initial, const std::shared_ptr < KoreanJamoType > _middle) : compoundChar(_compoundChar), initial(_initial), middle(_middle) {}
};

std::ostream& operator << (std::ostream &out, const std::vector < std::shared_ptr < KoreanJamoType > > &jamos) {

	for (auto jamo : jamos) {
		out << jamo->koreanChar << std::endl;
		out << jamo->letterType << std::endl;
		out << jamo->firstlast << std::endl;
		out << "________" << std::endl;
	}
	return out;
}

std::ostream& operator << (std::ostream &out, const std::vector < std::shared_ptr < KoreanCompoundType > > &compounds) {

	for (auto compound : compounds) {
		out << compound->compoundChar << std::endl;
		out << compound->initial->koreanChar << " " << compound->middle->koreanChar;
		
		if(compound->last) {
			out << " " << compound->last->koreanChar;
		}
		out << std::endl;
		
		out << compound->initial->begining << compound->middle->firstlast;
		if(compound->last) {
			out << compound->last->end << " ";
		}
		out << std::endl;
		out << "________" << std::endl;
	}
	return out;
}



std::string koreanChar;
std::string letterType;
std::string firstlast;
std::string begining;
std::string end;

std::string compound;
std::shared_ptr < KoreanJamoType > initial;
std::shared_ptr < KoreanJamoType > middle;
std::shared_ptr < KoreanJamoType > last;

#define YYSTYPE char *
typedef std::vector < std::shared_ptr < KoreanJamoType > > Jamos;
Jamos jamos;
typedef std::vector < std::shared_ptr < KoreanCompoundType > > Compounds;
Compounds compounds;

std::shared_ptr < KoreanJamoType > getJamo(char *target) {
	for(int i = 0; i < jamos.size(); i++) {
		if(jamos[i]->koreanChar == target) {
			return jamos[i];
		}
	}
	std::cout << "INVALID JAMO PARSE: " << target << std::endl;
}


#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_EOF(yycontext *yy); /* 12 */
YY_RULE(int) yy_TOKEN(yycontext *yy); /* 11 */
YY_RULE(int) yy_EOL(yycontext *yy); /* 10 */
YY_RULE(int) yy_TOKEN_JAMO(yycontext *yy); /* 9 */
YY_RULE(int) yy_SP(yycontext *yy); /* 8 */
YY_RULE(int) yy_TOKEN_HANGUL(yycontext *yy); /* 7 */
YY_RULE(int) yy_LINE(yycontext *yy); /* 6 */
YY_RULE(int) yy_SET(yycontext *yy); /* 5 */
YY_RULE(int) yy_TITLE(yycontext *yy); /* 4 */
YY_RULE(int) yy_STRUCT(yycontext *yy); /* 3 */
YY_RULE(int) yy_CSTRUCT(yycontext *yy); /* 2 */
YY_RULE(int) yy_START(yycontext *yy); /* 1 */

YY_ACTION(void) yy_1_EOF(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_EOF\n"));
  {
#line 178
  ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_TOKEN(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TOKEN\n"));
  {
#line 175
  ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_TOKEN_JAMO(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TOKEN_JAMO\n"));
  {
#line 174
  ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_TOKEN_HANGUL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TOKEN_HANGUL\n"));
  {
#line 173
  ;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_3_LINE(yycontext *yy, char *yytext, int yyleng)
{
#define c yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_LINE\n"));
  {
#line 157
  
		firstlast = yytext;
		int i = 0;
		while(i < firstlast.length() && firstlast[i] != '|') {
			begining += firstlast[i];
			i++;
		}
		i++;
		if(i < firstlast.length()) {
			while(i < firstlast.length()) {
				end += firstlast[i];
				i++;
			}
		}
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_2_LINE(yycontext *yy, char *yytext, int yyleng)
{
#define c yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_LINE\n"));
  {
#line 154
   
		letterType = yytext;
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_1_LINE(yycontext *yy, char *yytext, int yyleng)
{
#define c yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_LINE\n"));
  {
#line 151
  
		koreanChar = yytext;
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_4_SET(yycontext *yy, char *yytext, int yyleng)
{
#define d yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_SET\n"));
  {
#line 145
  
		//last = yytext;
		last = getJamo(yytext);
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef d
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_3_SET(yycontext *yy, char *yytext, int yyleng)
{
#define d yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_SET\n"));
  {
#line 141
  
		//middle = yytext;
		middle = getJamo(yytext);
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef d
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_2_SET(yycontext *yy, char *yytext, int yyleng)
{
#define d yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_SET\n"));
  {
#line 137
  
		//initial = yytext;
		initial = getJamo(yytext);
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef d
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_1_SET(yycontext *yy, char *yytext, int yyleng)
{
#define d yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_SET\n"));
  {
#line 134
  
		compound = yytext;
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef d
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_3_TITLE(yycontext *yy, char *yytext, int yyleng)
{
#define c yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_TITLE\n"));
  {
#line 128
  
		//middle = yytext;
		middle = getJamo(yytext);
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_2_TITLE(yycontext *yy, char *yytext, int yyleng)
{
#define c yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_TITLE\n"));
  {
#line 124
  
		//initial = yytext;
		initial = getJamo(yytext);
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_1_TITLE(yycontext *yy, char *yytext, int yyleng)
{
#define c yy->__val[-1]
#define b yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_TITLE\n"));
  {
#line 121
  
		compound = yytext;
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_1_STRUCT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_STRUCT\n"));
  {
#line 110
  
		std::shared_ptr < KoreanJamoType > jamo(new KoreanJamoType(koreanChar, letterType, begining, end, firstlast));
		jamos.push_back(jamo);
		koreanChar = "";
		letterType = "";
		firstlast = "";
		begining = "";
		end = "";
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_CSTRUCT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_CSTRUCT\n"));
  {
#line 100
  
		
		std::shared_ptr < KoreanCompoundType > set(new KoreanCompoundType(compound, initial, middle, last));
		compounds.push_back(set);
		//compound = "";
		//initial = "";
		//last = "";
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_CSTRUCT(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_CSTRUCT\n"));
  {
#line 93
  
		//last = "";
		std::shared_ptr < KoreanCompoundType > title(new KoreanCompoundType(compound, initial, middle));
		compounds.push_back(title);
		//compound = "";
		//initial = "";
	;
  }
#undef yythunkpos
#undef yypos
#undef yy
}

YY_RULE(int) yy_EOF(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOF"));
  {  int yypos2= yy->__pos, yythunkpos2= yy->__thunkpos;  if (!yymatchDot(yy)) goto l2;  goto l1;
  l2:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;
  }  yyDo(yy, yy_1_EOF, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOF", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOF", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TOKEN(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TOKEN"));
  {  int yypos4= yy->__pos, yythunkpos4= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\376\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\017\000\000\000")) goto l5;
  l6:;	
  {  int yypos7= yy->__pos, yythunkpos7= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\376\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\017\000\000\000")) goto l7;  goto l6;
  l7:;	  yy->__pos= yypos7; yy->__thunkpos= yythunkpos7;
  }  goto l4;
  l5:;	  yy->__pos= yypos4; yy->__thunkpos= yythunkpos4;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\200\377\377\377\377\377\377\377\377\377\377\017\000\000\000")) goto l8;
  l9:;	
  {  int yypos10= yy->__pos, yythunkpos10= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\040\200\377\377\377\377\377\377\377\377\377\377\017\000\000\000")) goto l10;  goto l9;
  l10:;	  yy->__pos= yypos10; yy->__thunkpos= yythunkpos10;
  }  goto l4;
  l8:;	  yy->__pos= yypos4; yy->__thunkpos= yythunkpos4;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\040\000\000\000\000\000\000\376\377\377\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l3;
  l11:;	
  {  int yypos12= yy->__pos, yythunkpos12= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\040\000\000\000\000\000\000\376\377\377\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l12;  goto l11;
  l12:;	  yy->__pos= yypos12; yy->__thunkpos= yythunkpos12;
  }
  }
  l4:;	  yyDo(yy, yy_1_TOKEN, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TOKEN", yy->__buf+yy->__pos));
  return 1;
  l3:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TOKEN", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOL"));  if (!yymatchClass(yy, (unsigned char *)"\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l13;
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 1;
  l13:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TOKEN_JAMO(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TOKEN_JAMO"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\376\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\017\000\000\000")) goto l14;
  l15:;	
  {  int yypos16= yy->__pos, yythunkpos16= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\376\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\017\000\000\000")) goto l16;  goto l15;
  l16:;	  yy->__pos= yypos16; yy->__thunkpos= yythunkpos16;
  }  yyDo(yy, yy_1_TOKEN_JAMO, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TOKEN_JAMO", yy->__buf+yy->__pos));
  return 1;
  l14:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TOKEN_JAMO", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SP(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "SP"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l17;
  yyprintf((stderr, "  ok   %s @ %s\n", "SP", yy->__buf+yy->__pos));
  return 1;
  l17:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SP", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TOKEN_HANGUL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TOKEN_HANGUL"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\377\377\377\377\377\077\000\000")) goto l18;
  l19:;	
  {  int yypos20= yy->__pos, yythunkpos20= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\377\377\377\377\377\077\000\000")) goto l20;  goto l19;
  l20:;	  yy->__pos= yypos20; yy->__thunkpos= yythunkpos20;
  }  yyDo(yy, yy_1_TOKEN_HANGUL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TOKEN_HANGUL", yy->__buf+yy->__pos));
  return 1;
  l18:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TOKEN_HANGUL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_LINE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "LINE"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l21;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN(yy)) goto l21;  yyDo(yy, yySet, -3, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l21;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l21;  yyDo(yy, yy_1_LINE, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l21;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN(yy)) goto l21;  yyDo(yy, yySet, -2, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l21;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l21;  yyDo(yy, yy_2_LINE, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l21;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN(yy)) goto l21;  yyDo(yy, yySet, -1, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l21;
#undef yytext
#undef yyleng
  }  if (!yy_EOL(yy)) goto l21;  yyDo(yy, yy_3_LINE, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "LINE", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l21:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "LINE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SET(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "SET"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_HANGUL(yy)) goto l22;  yyDo(yy, yySet, -4, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l22;  yyDo(yy, yy_1_SET, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_JAMO(yy)) goto l22;  yyDo(yy, yySet, -3, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l22;  yyDo(yy, yy_2_SET, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_JAMO(yy)) goto l22;  yyDo(yy, yySet, -2, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l22;  yyDo(yy, yy_3_SET, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_JAMO(yy)) goto l22;  yyDo(yy, yySet, -1, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l22;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l22;  if (!yy_EOL(yy)) goto l22;  yyDo(yy, yy_4_SET, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "SET", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 4, 0);
  return 1;
  l22:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SET", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TITLE(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "TITLE"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_HANGUL(yy)) goto l23;  yyDo(yy, yySet, -3, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l23;  yyDo(yy, yy_1_TITLE, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_JAMO(yy)) goto l23;  yyDo(yy, yySet, -2, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l23;  yyDo(yy, yy_2_TITLE, yy->__begin, yy->__end);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yy_TOKEN_JAMO(yy)) goto l23;  yyDo(yy, yySet, -1, 0);  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l23;
#undef yytext
#undef yyleng
  }  if (!yy_SP(yy)) goto l23;  if (!yy_EOL(yy)) goto l23;  yyDo(yy, yy_3_TITLE, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TITLE", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l23:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TITLE", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_STRUCT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "STRUCT"));  if (!yy_LINE(yy)) goto l24;  yyDo(yy, yy_1_STRUCT, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRUCT", yy->__buf+yy->__pos));
  return 1;
  l24:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRUCT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CSTRUCT(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CSTRUCT"));
  {  int yypos26= yy->__pos, yythunkpos26= yy->__thunkpos;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l27;
#undef yytext
#undef yyleng
  }  if (!yy_TITLE(yy)) goto l27;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l27;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_CSTRUCT, yy->__begin, yy->__end);  goto l26;
  l27:;	  yy->__pos= yypos26; yy->__thunkpos= yythunkpos26;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l25;
#undef yytext
#undef yyleng
  }  if (!yy_SET(yy)) goto l25;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l25;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_2_CSTRUCT, yy->__begin, yy->__end);
  }
  l26:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "CSTRUCT", yy->__buf+yy->__pos));
  return 1;
  l25:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CSTRUCT", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_START(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "START"));
  {  int yypos31= yy->__pos, yythunkpos31= yy->__thunkpos;  if (!yy_CSTRUCT(yy)) goto l32;
  l33:;	
  {  int yypos34= yy->__pos, yythunkpos34= yy->__thunkpos;  if (!yy_CSTRUCT(yy)) goto l34;  goto l33;
  l34:;	  yy->__pos= yypos34; yy->__thunkpos= yythunkpos34;
  }  goto l31;
  l32:;	  yy->__pos= yypos31; yy->__thunkpos= yythunkpos31;  if (!yy_STRUCT(yy)) goto l28;
  l35:;	
  {  int yypos36= yy->__pos, yythunkpos36= yy->__thunkpos;  if (!yy_STRUCT(yy)) goto l36;  goto l35;
  l36:;	  yy->__pos= yypos36; yy->__thunkpos= yythunkpos36;
  }
  }
  l31:;	
  l29:;	
  {  int yypos30= yy->__pos, yythunkpos30= yy->__thunkpos;
  {  int yypos37= yy->__pos, yythunkpos37= yy->__thunkpos;  if (!yy_CSTRUCT(yy)) goto l38;
  l39:;	
  {  int yypos40= yy->__pos, yythunkpos40= yy->__thunkpos;  if (!yy_CSTRUCT(yy)) goto l40;  goto l39;
  l40:;	  yy->__pos= yypos40; yy->__thunkpos= yythunkpos40;
  }  goto l37;
  l38:;	  yy->__pos= yypos37; yy->__thunkpos= yythunkpos37;  if (!yy_STRUCT(yy)) goto l30;
  l41:;	
  {  int yypos42= yy->__pos, yythunkpos42= yy->__thunkpos;  if (!yy_STRUCT(yy)) goto l42;  goto l41;
  l42:;	  yy->__pos= yypos42; yy->__thunkpos= yythunkpos42;
  }
  }
  l37:;	  goto l29;
  l30:;	  yy->__pos= yypos30; yy->__thunkpos= yythunkpos30;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "START", yy->__buf+yy->__pos));
  return 1;
  l28:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "START", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_START);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif
#line 179 "leg/koreanParser.cpp"


void startParser() {
   yycontext yy;
   memset(&yy, 0, sizeof(yy));
   while (true) {
	   if(yyparse(&yy)) break;
	   std::cout << yyparse(&yy) << std::endl;
   };
   yyrelease(&yy);
}

